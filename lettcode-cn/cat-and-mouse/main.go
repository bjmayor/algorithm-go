package main

import "fmt"

/*
https://leetcode.cn/problems/cat-and-mouse/?envType=daily-question&envId=2025-02-10

913. 猫和老鼠

一只猫和一只老鼠在无向图中玩游戏。

图的节点数为 n,节点编号从 0 到 n-1。其中:
- 节点 0 是洞口,老鼠获胜的终点
- 节点 1 是老鼠的起始位置
- 节点 2 是猫的起始位置

猫和老鼠轮流行动,老鼠先行动。每次行动时:
- 老鼠可以跳到与当前位置相邻的任意节点
- 猫可以跳到与当前位置相邻的任意节点,但不能跳到洞口(节点0)

如果出现以下情况之一,游戏结束:
1. 如果猫和老鼠出现在同一个节点,猫获胜
2. 如果老鼠到达洞口,老鼠获胜
3. 如果某一位置重复出现了一定次数,游戏平局

给定一个无向图 graph,graph[i] 是一个列表,由所有与节点 i 直接相连的节点组成。

返回:
1 表示老鼠获胜
2 表示猫获胜
0 表示平局

算法思想:
1. 使用拓扑排序解决博弈问题:
   - 状态由(mouse, cat, turn)三元组表示
   - degrees[mouse][cat][turn] 记录每个状态的出度
   - results[mouse][cat][turn] 记录每个状态的游戏结果

2. 状态转移:
   - 如果老鼠到达洞口(位置0),老鼠获胜
   - 如果猫和老鼠在同一位置,猫获胜
   - 对于其他状态,通过拓扑排序计算结果:
     * 如果当前玩家有必胜策略,则当前状态为必胜
     * 如果当前玩家所有可能移动都会输,则当前状态为必败
     * 如果出度减为0,则根据当前回合确定输赢

3. 时间复杂度: O(n^3)
   空间复杂度: O(n^2)
*/

/**
 * catMouseGame 猫鼠游戏
 * @param graph 无向图的邻接表表示
 * @return int 游戏结果：1-老鼠获胜，2-猫获胜，0-平局
 * @complexity 时间复杂度：O(N^3)，其中N是节点数
 * @complexity 空间复杂度：O(N^2)
 */
const (
	mouseTurn = 0
	catTurn   = 1

	draw     = 0
	mouseWin = 1
	catWin   = 2
)

func catMouseGame(graph [][]int) int {

	n := len(graph)
	// 初始化出度和结果
	degrees := make([][][]int, n)
	results := make([][][]int, n)
	for i := 0; i < n; i++ {
		degrees[i] = make([][]int, n)
		results[i] = make([][]int, n)
		for j := 0; j < n; j++ {
			degrees[i][j] = make([]int, 2)
			results[i][j] = make([]int, 2)
		}
	}

	for i := 0; i < n; i++ {
		for j := 0; j < n; j++ {
			degrees[i][j][mouseTurn] = len(graph[i])
			degrees[i][j][catTurn] = len(graph[j])
		}
	}

	// 初始化结果
	for i := 0; i < n; i++ {
		for j := 0; j < n; j++ {
			results[i][j][mouseTurn] = draw
			results[i][j][catTurn] = draw
		}
	}

	// 拓扑排序
	type state struct{ mouse, cat, turn int }
	q := []state{}
	// 老鼠必胜状态
	for i := 1; i < n; i++ {
		results[0][i][mouseTurn] = mouseWin
		results[0][i][catTurn] = mouseWin
		q = append(q, state{0, i, mouseTurn})
		q = append(q, state{0, i, catTurn})
	}

	// 猫必胜状态
	for i := 1; i < n; i++ {
		results[i][i][catTurn] = catWin
		results[i][i][mouseTurn] = catWin
		q = append(q, state{i, i, catTurn})
		q = append(q, state{i, i, mouseTurn})
	}

	// 获取前置状态
	getPrevStates := func(s state) (prevStates []state) {
		// 轮到老鼠了。说明上一个移动的是猫，老鼠位置没变 还是s.mouse, 猫的位置是graph[s.cat]中的一个(非 0), 因为 graph[a]的定义是a能到达的节点。反过来就是a能被哪些节点到达
		if s.turn == mouseTurn {
			for _, pre := range graph[s.cat] {
				if pre != 0 {
					prevStates = append(prevStates, state{s.mouse, pre, catTurn})
				}
			}
		}
		// 轮到猫了。说明上一个状态是老鼠
		if s.turn == catTurn {
			for _, pre := range graph[s.mouse] {
				prevStates = append(prevStates, state{pre, s.cat, mouseTurn})
			}
		}
		return
	}

	for len(q) > 0 {
		s := q[0]
		q = q[1:]
		result := results[s.mouse][s.cat][s.turn]
		for _, p := range getPrevStates(s) {
			prevMouse, prevCat, prevTurn := p.mouse, p.cat, p.turn
			if results[prevMouse][prevCat][prevTurn] == draw {
				canWin := result == mouseWin && prevTurn == mouseTurn || result == catWin && prevTurn == catTurn
				if canWin {
					results[prevMouse][prevCat][prevTurn] = result
					q = append(q, p)
				}
			}
		}
		if result != draw {
			continue
		}
		prevStates := getPrevStates(s)
		for _, prev := range prevStates {
			// 上一个状态如果是胜负已分，则进不来这一步，所以可以跳过
			if results[prev.mouse][prev.cat][prev.turn] != draw {
				continue
			}
			results[prev.mouse][prev.cat][prev.turn] = result
		}
		continue

	}

	return results[1][2][mouseTurn]
}

func main() {
	graph := [][]int{
		{2, 5},
		{3},
		{0, 4, 5},
		{1, 4, 5},
		{2, 3},
		{0, 2, 3},
	}
	fmt.Println(catMouseGame(graph)) // 输出游戏结果

	graph = [][]int{
		{1, 3},
		{0},
		{3},
		{0, 1, 2},
	}
	fmt.Println(catMouseGame(graph)) // 输出游戏结果

	graph = [][]int{
		{12, 23, 30, 37, 39},
		{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49},
		{1, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 45, 46, 47, 48},
		{1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 49},
		{1, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 26, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
		{1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 32, 33, 36, 37, 38, 40, 41, 42, 43, 49},
		{1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 27, 30, 31, 32, 33, 35, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
		{1, 3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 47, 48},
		{1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 49},
		{1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 48, 49},
		{1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 16, 17, 18, 19, 22, 24, 25, 26, 28, 29, 30, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49},
		{1, 2, 4, 5, 6, 7, 8, 9, 10, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
		{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49},
		{1, 2, 3, 4, 6, 7, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
		{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 16, 18, 19, 21, 22, 23, 24, 27, 28, 30, 31, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49},
		{1, 2, 4, 5, 6, 7, 8, 9, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 49},
		{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49},
		{1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
		{1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49},
		{1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49},
		{2, 3, 5, 7, 11, 13, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49},
		{2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49},
		{1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49},
		{0, 1, 3, 4, 5, 6, 11, 12, 13, 14, 15, 16, 19, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49},
		{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 49},
		{1, 2, 3, 7, 8, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49},
		{1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 43, 45, 46, 47, 48, 49},
		{1, 2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49},
		{1, 2, 3, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49},
		{1, 2, 3, 4, 7, 9, 10, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49},
		{0, 1, 2, 4, 6, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 48},
		{1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 47, 48, 49},
		{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49},
		{1, 2, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49},
		{1, 2, 3, 4, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 45, 46, 47, 48},
		{1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 36, 38, 40, 42, 43, 44, 45, 47, 49},
		{1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49},
		{0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 33, 34, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49},
		{1, 2, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 39, 40, 41, 42, 43, 45, 46, 48, 49},
		{0, 1, 3, 4, 7, 9, 10, 11, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 34, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49},
		{1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49},
		{1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48},
		{1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 48},
		{1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48},
		{3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49},
		{1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 46, 47, 48, 49},
		{1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48},
		{1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 46, 48, 49},
		{1, 2, 4, 6, 7, 9, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47},
		{1, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 47},
	}
	fmt.Println(catMouseGame(graph)) // 输出游戏结果
}
